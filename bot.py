import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from google import genai
from google.genai.errors import APIError # –î–æ–¥–∞–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ API

# === 1. –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –Ü –¢–û–ö–ï–ù–ò ===
# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è (—Ç—Ä–µ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —É WebStorm)
# --- –£–í–ê–ì–ê: –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¢–ò–ú–ß–ê–°–û–í–û –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á—ñ, –Ω–∞–¥–∞–Ω—ñ –≤ –∑–∞–ø–∏—Ç—ñ.
#            –¶–µ –ù–ï–ë–ï–ó–ü–ï–ß–ù–û —ñ –º–∞—î –±—É—Ç–∏ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –æ—Å.getenv() –¥–ª—è production!
TOKENTG = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

if not TOKENTG:
    # –ó–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    raise ValueError(
        "TELEGRAM_BOT_TOKEN environment variable is required. "
        "Please set your Telegram bot token in your IDE or shell environment."
    )

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è (–¥–æ–ø–æ–º–∞–≥–∞—î –±–∞—á–∏—Ç–∏, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini
client = None
if GEMINI_API_KEY:
    try:
        client = genai.Client(api_key=GEMINI_API_KEY)
        logger.info("Gemini –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Gemini: {e}")
        client = None
else:
    logger.warning("GEMINI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. Gemini —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –±—É–¥–µ –æ–±–º–µ–∂–µ–Ω–∞.")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –º–µ–Ω—é
# –ó–∞–≤–¥–∞–Ω–Ω—è: –°—Ç—É–¥–µ–Ω—Ç (–ø—Ä—ñ–∑–≤–∏—â–µ, –≥—Ä—É–ø–∞), IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, –ö–æ–Ω—Ç–∞–∫—Ç–∏, Prompt ChatGPT
reply_keyboard = [
    [KeyboardButton("üë§ –°—Ç—É–¥–µ–Ω—Ç")],
    [KeyboardButton("üíª IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"), KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")],
    [KeyboardButton("‚úçÔ∏è –ß–∞—Ç –∑ AI")] # –û–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ —Ä–µ–∂–∏–º —á–∞—Ç—É
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)


# === 2. –§–£–ù–ö–¶–Ü–á –û–ë–†–û–ë–ù–ò–ö–Ü–í –ö–û–ú–ê–ù–î ===

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ /start —Ç–∞ –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é."""
    if not update.message or not update.effective_user:
        return

    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.mention_html()}! –Ø —Ç–≤—ñ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏–π –±–æ—Ç. –û–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∞–±–æ –Ω–∞–¥—Ä—É–∫—É–π `/chat` –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ Gemini.",
        reply_markup=markup,
    )

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /chat (–ø–æ—á–∏–Ω–∞—î —Ä–µ–∂–∏–º —á–∞—Ç—É –∑ Gemini)
async def start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—ñ–¥–æ–º–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –≤—ñ–Ω –º–æ–∂–µ –ø–æ—á–∞—Ç–∏ —á–∞—Ç –∑ Gemini."""
    if not update.message:
        return

    if context.user_data is not None:
        context.user_data['chat_mode'] = True # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º —á–∞—Ç—É
    await update.message.reply_text(
        "üìù **–†–µ–∂–∏–º Gemini –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!** –ù–∞–¥—Å–∏–ª–∞–π —Å–≤–æ—ó –∑–∞–ø–∏—Ç–∏. \n\n"
        "–©–æ–± –≤–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∞–±–æ –Ω–∞–±–µ—Ä–∏ `/menu`.",
        parse_mode='Markdown'
    )

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /menu (–ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é)
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ –≤–∏–º–∏–∫–∞—î —Ä–µ–∂–∏–º —á–∞—Ç—É."""
    if not update.message:
        return

    if context.user_data is not None:
        context.user_data['chat_mode'] = False # –í–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º —á–∞—Ç—É
    await update.message.reply_text(
        "üëã –¢–∏ –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é
async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é."""
    if not update.message or not update.message.text:
        return

    text = update.message.text

    # 1. –°—Ç—É–¥–µ–Ω—Ç
    if text == "üë§ –°—Ç—É–¥–µ–Ω—Ç":
        reply_text = (
            "**–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫—ñ –¥–∞–Ω—ñ:**\n"
            "–ü—Ä—ñ–∑–≤–∏—â–µ: *–¢–≤–æ—î –ü—Ä—ñ–∑–≤–∏—â–µ*\n"
            "–ì—Ä—É–ø–∞: *–¢–≤–æ—è –ì—Ä—É–ø–∞*"
        )
    # 2. IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó
    elif text == "üíª IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó":
        reply_text = (
            "**IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó:**\n"
            "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç-–±–æ—Ç—ñ–≤, –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è, web-—Ä–æ–∑—Ä–æ–±–∫–∞, –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞. "
            "–Ø ‚Äî –ø—Ä–∏–∫–ª–∞–¥ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è **Python** —Ç–∞ **Telegram API**."
        )
    # 3. –ö–æ–Ω—Ç–∞–∫—Ç–∏
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏":
        reply_text = (
            "**–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: `+380 XXX XX XX XXX`\n"
            "E-mail: `—Ç–≤–æ—è_–ø–æ—à—Ç–∞@example.com`"
        )
    # 4. –ß–∞—Ç –∑ AI (–ø–µ—Ä–µ—Ö—ñ–¥ —É —Ä–µ–∂–∏–º —á–∞—Ç—É)
    elif text == "‚úçÔ∏è –ß–∞—Ç –∑ AI": # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ—ó –Ω–∞–∑–≤–∏ –∫–Ω–æ–ø–∫–∏
        await start_chat(update, context) # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é —Å—Ç–∞—Ä—Ç—É —á–∞—Ç—É
        return
    else:
        # === –ú–û–î–ò–§–Ü–ö–ê–¶–Ü–Ø: –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –ê–ö–¢–ò–í–ê–¶–Ü–Ø –†–ï–ñ–ò–ú–£ ===
        # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –Ω–µ —î –∫–Ω–æ–ø–∫–æ—é –º–µ–Ω—é, –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ Gemini –∑–∞–ø–∏—Ç.

        is_chat_mode_active = context.user_data and context.user_data.get('chat_mode', False)

        if not is_chat_mode_active:
            if context.user_data is not None:
                context.user_data['chat_mode'] = True # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è

            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—é
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —Ä–µ–∂–∏–º Gemini –¥–ª—è —Ç–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É. \n"
                "–©–æ–± –≤–∏–π—Ç–∏, –Ω–∞–±–µ—Ä–∏ `/menu` –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.",
                parse_mode='Markdown'
            )

        await gemini_reply(update, context)
        return
        # =================================================

    await update.message.reply_text(reply_text, parse_mode='Markdown')


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Gemini
async def gemini_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Gemini API —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
    if not update.message or not update.effective_chat:
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É —á–∞—Ç—É
    if not context.user_data or not context.user_data.get('chat_mode'):
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—à–µ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ä–µ–∂–∏–º –≤—Å–µ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π
        logger.warning("gemini_reply –≤–∏–∫–ª–∏–∫–∞–Ω–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ chat_mode.")
        return

        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —â–æ –±–æ—Ç –æ–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    user_message = update.message.text

    try:
        if client:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Gemini API
            # –î–æ–¥–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç, —â–æ–± Gemini –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            prompt = f"–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ü–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_message}"

            response = client.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt
            )

            reply = response.text or "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini."
        else:
            # –Ø–∫—â–æ Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–ª—É—à–∫—É
            reply = (
                f"ü§ñ –û—Ç—Ä–∏–º–∞–≤ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç: '{user_message}'\n\n"
                f"‚ùó Gemini API –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ "
                f"–∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è GEMINI_API_KEY —Ç–∞ —á–∏ —î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –º–µ—Ä–µ–∂—ñ."
            )

    except APIError as e:
        # –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ API (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∫–ª—é—á)
        logger.error(f"Gemini API –ø–æ–º–∏–ª–∫–∞: {e}")
        reply = "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Gemini API. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤—ñ–π API-–∫–ª—é—á."
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ Gemini –∑–∞–ø–∏—Ç—É: {e}")
        reply = "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

    await update.message.reply_text(reply)


# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    logger.error('Update "%s" caused error "%s"', update, context.error)

    if isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )


# === 3. –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¢–ê –ó–ê–ü–£–°–ö ===

def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ Application
    application = Application.builder().token(TOKENTG).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chat", start_chat))
    application.add_handler(CommandHandler("menu", show_menu))

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ñ—ñ–ª—å—Ç—Ä—É—î –∫–æ–º–∞–Ω–¥–∏)
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_buttons)
    application.add_handler(text_handler)

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ–ª—ñ–Ω–≥...")
    # –î–æ–¥–∞–Ω–æ drop_pending_updates=True –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ 409 Conflict
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == '__main__':
    main()
